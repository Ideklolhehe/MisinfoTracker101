"""
Verification service for the CIVILIAN system.
This service analyzes submitted content for misinformation and AI generation.
"""

import os
import base64
import json
import logging
from openai import OpenAI
from PIL import Image
import io

logger = logging.getLogger(__name__)

# Initialize OpenAI client
openai_api_key = os.environ.get("OPENAI_API_KEY")
client = None
if openai_api_key:
    try:
        client = OpenAI(api_key=openai_api_key)
        logger.info("OpenAI client initialized")
    except Exception as e:
        logger.error(f"Error initializing OpenAI client: {e}")
else:
    logger.warning("OPENAI_API_KEY not found in environment variables")

def verify_content(content, verification_type="misinformation"):
    """
    Verify text content for misinformation or AI generation.
    
    Args:
        content (str): The text content to verify
        verification_type (str): Type of verification to perform
            Options: "misinformation", "ai_generated", "factual_accuracy"
    
    Returns:
        dict: Results of the verification including confidence score and evidence
    """
    if not client:
        logger.error("OpenAI client not initialized")
        return {
            "confidence": 0.0,
            "summary": "Verification could not be performed - API not configured",
            "evidence": "The verification service is not properly configured. Please contact an administrator."
        }
    
    try:
        system_prompts = {
            "misinformation": (
                "You are an expert misinformation analyst with the CIVILIAN system. "
                "Your task is to carefully analyze the provided content and determine if it contains "
                "misinformation, disinformation, or deceptive content. "
                "Consider factual accuracy, presence of conspiracy theories, misleading statements, "
                "and manipulation techniques. "
                "Format your response as a JSON object with the following structure: "
                "{\n"
                "  \"confidence\": float, // 0.0-1.0 indicating confidence of finding misinformation\n"
                "  \"summary\": string, // Brief analysis summary\n"
                "  \"evidence\": string, // Detailed evidence supporting your conclusion\n"
                "  \"categorization\": string // false claim, misleading, manipulative, conspiracy, accurate\n"
                "}"
            ),
            "ai_generated": (
                "You are an AI content detection expert. "
                "Your task is to analyze the provided content and determine the likelihood it was "
                "generated by an AI system rather than written by a human. "
                "Look for patterns typical of AI-generated text such as: "
                "repetitive phrasing, generic language, unusual coherence across long passages, "
                "lack of personal experience details, and consistent tone. "
                "Format your response as a JSON object with the following structure: "
                "{\n"
                "  \"confidence\": float, // 0.0-1.0 indicating confidence of AI generation\n"
                "  \"summary\": string, // Brief analysis summary\n"
                "  \"evidence\": string, // Detailed evidence supporting your conclusion\n"
                "  \"patterns_detected\": [string] // List of AI patterns found in the text\n"
                "}"
            ),
            "factual_accuracy": (
                "You are a factual accuracy verification specialist. "
                "Your task is to verify the factual claims in the provided content. "
                "Identify specific claims and assess their accuracy based on general knowledge. "
                "Format your response as a JSON object with the following structure: "
                "{\n"
                "  \"confidence\": float, // 0.0-1.0 indicating confidence of inaccuracy\n"
                "  \"summary\": string, // Brief analysis summary\n"
                "  \"evidence\": string, // Detailed evidence supporting your conclusion\n"
                "  \"claims_assessed\": [object] // Array of {claim: string, accuracy: string} objects\n"
                "}"
            )
        }
        
        # Select appropriate system prompt
        system_prompt = system_prompts.get(
            verification_type, 
            system_prompts["misinformation"]
        )
        
        # Call OpenAI API with content
        response = client.chat.completions.create(
            model="gpt-4o",  # the newest OpenAI model is "gpt-4o" which was released May 13, 2024
            messages=[
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": content}
            ],
            response_format={"type": "json_object"}
        )
        
        # Parse the response
        result = json.loads(response.choices[0].message.content)
        
        # Ensure required fields are present
        if "confidence" not in result:
            result["confidence"] = 0.5
        if "summary" not in result:
            result["summary"] = "Analysis completed but no summary was provided."
        if "evidence" not in result:
            result["evidence"] = "No detailed evidence was provided."
        
        return result
    
    except Exception as e:
        logger.error(f"Error in content verification: {e}")
        return {
            "confidence": 0.0,
            "summary": f"Verification error: {str(e)}",
            "evidence": "An error occurred during the verification process."
        }

def analyze_image_content(image_path):
    """
    Analyze an image for authenticity and potential manipulation.
    
    Args:
        image_path (str): Path to the image file
    
    Returns:
        dict: Results of the image analysis
    """
    if not client:
        logger.error("OpenAI client not initialized")
        return {
            "confidence": 0.0,
            "summary": "Image analysis could not be performed - API not configured",
            "evidence": "The verification service is not properly configured. Please contact an administrator."
        }
    
    try:
        # Load and encode the image
        with open(image_path, "rb") as img_file:
            image_data = img_file.read()
            base64_image = base64.b64encode(image_data).decode('utf-8')
        
        # Call OpenAI with multimodal capability
        response = client.chat.completions.create(
            model="gpt-4o",  # the newest OpenAI model is "gpt-4o" which was released May 13, 2024
            messages=[
                {
                    "role": "system", 
                    "content": (
                        "You are an image authentication specialist with the CIVILIAN system. "
                        "Your task is to carefully analyze the provided image for signs of AI generation, "
                        "manipulation, or other forms of inauthenticity. "
                        "Look for telltale signs like: inconsistent shadows, unnatural features, "
                        "strange artifacts, distorted proportions, and other anomalies. "
                        "Format your response as a JSON object with the following structure: "
                        "{\n"
                        "  \"confidence\": float, // 0.0-1.0 indicating confidence of manipulation\n"
                        "  \"summary\": string, // Brief analysis summary\n"
                        "  \"evidence\": string, // Detailed evidence supporting your conclusion\n"
                        "  \"issues_detected\": [string] // List of specific issues found\n"
                        "}"
                    )
                },
                {
                    "role": "user",
                    "content": [
                        {
                            "type": "text",
                            "text": "Analyze this image for signs of manipulation or AI generation:"
                        },
                        {
                            "type": "image_url",
                            "image_url": {"url": f"data:image/jpeg;base64,{base64_image}"}
                        }
                    ]
                }
            ],
            response_format={"type": "json_object"}
        )
        
        # Parse the response
        result = json.loads(response.choices[0].message.content)
        
        # Ensure required fields are present
        if "confidence" not in result:
            result["confidence"] = 0.5
        if "summary" not in result:
            result["summary"] = "Analysis completed but no summary was provided."
        if "evidence" not in result:
            result["evidence"] = "No detailed evidence was provided."
        
        return result
    
    except Exception as e:
        logger.error(f"Error in image analysis: {e}")
        return {
            "confidence": 0.0,
            "summary": f"Image analysis error: {str(e)}",
            "evidence": "An error occurred during the image analysis process."
        }